// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::DomElement;
use crate::DomNode;
use crate::GcFeatureNode;
use crate::GcFloat;
use crate::GcNode;
use crate::GcSwissKnife;
use glib::object::Cast;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
	#[doc(alias = "ArvGcSwissKnifeNode")]
	pub struct GcSwissKnifeNode(Object<ffi::ArvGcSwissKnifeNode, ffi::ArvGcSwissKnifeNodeClass>) @extends GcSwissKnife, GcFeatureNode, GcNode, DomElement, DomNode, @implements GcFloat;

	match fn {
		type_ => || ffi::arv_gc_swiss_knife_node_get_type(),
	}
}

impl GcSwissKnifeNode {
	#[doc(alias = "arv_gc_swiss_knife_node_new")]
	pub fn new() -> GcSwissKnifeNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_swiss_knife_node_new()).unsafe_cast() }
	}
}

impl Default for GcSwissKnifeNode {
	fn default() -> Self {
		Self::new()
	}
}

unsafe impl Send for GcSwissKnifeNode {}

pub const NONE_GC_SWISS_KNIFE_NODE: Option<&GcSwissKnifeNode> = None;

impl fmt::Display for GcSwissKnifeNode {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		f.write_str("GcSwissKnifeNode")
	}
}
