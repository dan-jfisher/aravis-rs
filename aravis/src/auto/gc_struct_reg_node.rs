// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::DomElement;
use crate::DomNode;
use crate::GcFeatureNode;
use crate::GcNode;
use crate::GcRegister;
use crate::GcRegisterNode;
use glib::object::Cast;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
	#[doc(alias = "ArvGcStructRegNode")]
	pub struct GcStructRegNode(Object<ffi::ArvGcStructRegNode, ffi::ArvGcStructRegNodeClass>) @extends GcRegisterNode, GcFeatureNode, GcNode, DomElement, DomNode, @implements GcRegister;

	match fn {
		type_ => || ffi::arv_gc_struct_reg_node_get_type(),
	}
}

impl GcStructRegNode {
	///
	/// # Returns
	///
	/// a new StructReg [`GcNode`][crate::GcNode]
	#[doc(alias = "arv_gc_struct_reg_node_new")]
	pub fn new() -> GcStructRegNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_struct_reg_node_new()).unsafe_cast() }
	}
}

impl Default for GcStructRegNode {
	fn default() -> Self {
		Self::new()
	}
}

unsafe impl Send for GcStructRegNode {}

pub const NONE_GC_STRUCT_REG_NODE: Option<&GcStructRegNode> = None;

impl fmt::Display for GcStructRegNode {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		f.write_str("GcStructRegNode")
	}
}
