// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::GvStreamPacketResend;
use crate::GvStreamSocketBuffer;
use crate::Stream;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;

glib::wrapper! {
	#[doc(alias = "ArvGvStream")]
	pub struct GvStream(Object<ffi::ArvGvStream, ffi::ArvGvStreamClass>) @extends Stream;

	match fn {
		type_ => || ffi::arv_gv_stream_get_type(),
	}
}

impl GvStream {
	#[doc(alias = "arv_gv_stream_get_port")]
	#[doc(alias = "get_port")]
	pub fn port(&self) -> u16 {
		unsafe { ffi::arv_gv_stream_get_port(self.to_glib_none().0) }
	}

	///
	/// # Returns
	///
	#[doc(alias = "arv_gv_stream_get_statistics")]
	#[doc(alias = "get_statistics")]
	pub fn statistics(&self) -> (u64, u64) {
		unsafe {
			let mut n_resent_packets = mem::MaybeUninit::uninit();
			let mut n_missing_packets = mem::MaybeUninit::uninit();
			ffi::arv_gv_stream_get_statistics(
				self.to_glib_none().0,
				n_resent_packets.as_mut_ptr(),
				n_missing_packets.as_mut_ptr(),
			);
			let n_resent_packets = n_resent_packets.assume_init();
			let n_missing_packets = n_missing_packets.assume_init();
			(n_resent_packets, n_missing_packets)
		}
	}

	#[doc(alias = "frame-retention")]
	pub fn frame_retention(&self) -> u32 {
		unsafe {
			let mut value = glib::Value::from_type(<u32 as StaticType>::static_type());
			glib::gobject_ffi::g_object_get_property(
				self.as_ptr() as *mut glib::gobject_ffi::GObject,
				b"frame-retention\0".as_ptr() as *const _,
				value.to_glib_none_mut().0,
			);
			value
				.get()
				.expect("Return Value for property `frame-retention` getter")
		}
	}

	#[doc(alias = "frame-retention")]
	pub fn set_frame_retention(&self, frame_retention: u32) {
		unsafe {
			glib::gobject_ffi::g_object_set_property(
				self.as_ptr() as *mut glib::gobject_ffi::GObject,
				b"frame-retention\0".as_ptr() as *const _,
				frame_retention.to_value().to_glib_none().0,
			);
		}
	}

	#[doc(alias = "packet-request-ratio")]
	pub fn packet_request_ratio(&self) -> f64 {
		unsafe {
			let mut value = glib::Value::from_type(<f64 as StaticType>::static_type());
			glib::gobject_ffi::g_object_get_property(
				self.as_ptr() as *mut glib::gobject_ffi::GObject,
				b"packet-request-ratio\0".as_ptr() as *const _,
				value.to_glib_none_mut().0,
			);
			value
				.get()
				.expect("Return Value for property `packet-request-ratio` getter")
		}
	}

	#[doc(alias = "packet-request-ratio")]
	pub fn set_packet_request_ratio(&self, packet_request_ratio: f64) {
		unsafe {
			glib::gobject_ffi::g_object_set_property(
				self.as_ptr() as *mut glib::gobject_ffi::GObject,
				b"packet-request-ratio\0".as_ptr() as *const _,
				packet_request_ratio.to_value().to_glib_none().0,
			);
		}
	}

	#[doc(alias = "packet-resend")]
	pub fn packet_resend(&self) -> GvStreamPacketResend {
		unsafe {
			let mut value =
				glib::Value::from_type(<GvStreamPacketResend as StaticType>::static_type());
			glib::gobject_ffi::g_object_get_property(
				self.as_ptr() as *mut glib::gobject_ffi::GObject,
				b"packet-resend\0".as_ptr() as *const _,
				value.to_glib_none_mut().0,
			);
			value
				.get()
				.expect("Return Value for property `packet-resend` getter")
		}
	}

	#[doc(alias = "packet-resend")]
	pub fn set_packet_resend(&self, packet_resend: GvStreamPacketResend) {
		unsafe {
			glib::gobject_ffi::g_object_set_property(
				self.as_ptr() as *mut glib::gobject_ffi::GObject,
				b"packet-resend\0".as_ptr() as *const _,
				packet_resend.to_value().to_glib_none().0,
			);
		}
	}

	#[doc(alias = "packet-timeout")]
	pub fn packet_timeout(&self) -> u32 {
		unsafe {
			let mut value = glib::Value::from_type(<u32 as StaticType>::static_type());
			glib::gobject_ffi::g_object_get_property(
				self.as_ptr() as *mut glib::gobject_ffi::GObject,
				b"packet-timeout\0".as_ptr() as *const _,
				value.to_glib_none_mut().0,
			);
			value
				.get()
				.expect("Return Value for property `packet-timeout` getter")
		}
	}

	#[doc(alias = "packet-timeout")]
	pub fn set_packet_timeout(&self, packet_timeout: u32) {
		unsafe {
			glib::gobject_ffi::g_object_set_property(
				self.as_ptr() as *mut glib::gobject_ffi::GObject,
				b"packet-timeout\0".as_ptr() as *const _,
				packet_timeout.to_value().to_glib_none().0,
			);
		}
	}

	#[doc(alias = "socket-buffer")]
	pub fn socket_buffer(&self) -> GvStreamSocketBuffer {
		unsafe {
			let mut value =
				glib::Value::from_type(<GvStreamSocketBuffer as StaticType>::static_type());
			glib::gobject_ffi::g_object_get_property(
				self.as_ptr() as *mut glib::gobject_ffi::GObject,
				b"socket-buffer\0".as_ptr() as *const _,
				value.to_glib_none_mut().0,
			);
			value
				.get()
				.expect("Return Value for property `socket-buffer` getter")
		}
	}

	#[doc(alias = "socket-buffer")]
	pub fn set_socket_buffer(&self, socket_buffer: GvStreamSocketBuffer) {
		unsafe {
			glib::gobject_ffi::g_object_set_property(
				self.as_ptr() as *mut glib::gobject_ffi::GObject,
				b"socket-buffer\0".as_ptr() as *const _,
				socket_buffer.to_value().to_glib_none().0,
			);
		}
	}

	#[doc(alias = "socket-buffer-size")]
	pub fn socket_buffer_size(&self) -> i32 {
		unsafe {
			let mut value = glib::Value::from_type(<i32 as StaticType>::static_type());
			glib::gobject_ffi::g_object_get_property(
				self.as_ptr() as *mut glib::gobject_ffi::GObject,
				b"socket-buffer-size\0".as_ptr() as *const _,
				value.to_glib_none_mut().0,
			);
			value
				.get()
				.expect("Return Value for property `socket-buffer-size` getter")
		}
	}

	#[doc(alias = "socket-buffer-size")]
	pub fn set_socket_buffer_size(&self, socket_buffer_size: i32) {
		unsafe {
			glib::gobject_ffi::g_object_set_property(
				self.as_ptr() as *mut glib::gobject_ffi::GObject,
				b"socket-buffer-size\0".as_ptr() as *const _,
				socket_buffer_size.to_value().to_glib_none().0,
			);
		}
	}

	#[doc(alias = "frame-retention")]
	pub fn connect_frame_retention_notify<F: Fn(&Self) + Send + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId {
		unsafe extern "C" fn notify_frame_retention_trampoline<
			F: Fn(&GvStream) + Send + 'static,
		>(
			this: *mut ffi::ArvGvStream,
			_param_spec: glib::ffi::gpointer,
			f: glib::ffi::gpointer,
		) {
			let f: &F = &*(f as *const F);
			f(&from_glib_borrow(this))
		}
		unsafe {
			let f: Box_<F> = Box_::new(f);
			connect_raw(
				self.as_ptr() as *mut _,
				b"notify::frame-retention\0".as_ptr() as *const _,
				Some(transmute::<_, unsafe extern "C" fn()>(
					notify_frame_retention_trampoline::<F> as *const (),
				)),
				Box_::into_raw(f),
			)
		}
	}

	#[doc(alias = "packet-request-ratio")]
	pub fn connect_packet_request_ratio_notify<F: Fn(&Self) + Send + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId {
		unsafe extern "C" fn notify_packet_request_ratio_trampoline<
			F: Fn(&GvStream) + Send + 'static,
		>(
			this: *mut ffi::ArvGvStream,
			_param_spec: glib::ffi::gpointer,
			f: glib::ffi::gpointer,
		) {
			let f: &F = &*(f as *const F);
			f(&from_glib_borrow(this))
		}
		unsafe {
			let f: Box_<F> = Box_::new(f);
			connect_raw(
				self.as_ptr() as *mut _,
				b"notify::packet-request-ratio\0".as_ptr() as *const _,
				Some(transmute::<_, unsafe extern "C" fn()>(
					notify_packet_request_ratio_trampoline::<F> as *const (),
				)),
				Box_::into_raw(f),
			)
		}
	}

	#[doc(alias = "packet-resend")]
	pub fn connect_packet_resend_notify<F: Fn(&Self) + Send + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId {
		unsafe extern "C" fn notify_packet_resend_trampoline<F: Fn(&GvStream) + Send + 'static>(
			this: *mut ffi::ArvGvStream,
			_param_spec: glib::ffi::gpointer,
			f: glib::ffi::gpointer,
		) {
			let f: &F = &*(f as *const F);
			f(&from_glib_borrow(this))
		}
		unsafe {
			let f: Box_<F> = Box_::new(f);
			connect_raw(
				self.as_ptr() as *mut _,
				b"notify::packet-resend\0".as_ptr() as *const _,
				Some(transmute::<_, unsafe extern "C" fn()>(
					notify_packet_resend_trampoline::<F> as *const (),
				)),
				Box_::into_raw(f),
			)
		}
	}

	#[doc(alias = "packet-timeout")]
	pub fn connect_packet_timeout_notify<F: Fn(&Self) + Send + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId {
		unsafe extern "C" fn notify_packet_timeout_trampoline<F: Fn(&GvStream) + Send + 'static>(
			this: *mut ffi::ArvGvStream,
			_param_spec: glib::ffi::gpointer,
			f: glib::ffi::gpointer,
		) {
			let f: &F = &*(f as *const F);
			f(&from_glib_borrow(this))
		}
		unsafe {
			let f: Box_<F> = Box_::new(f);
			connect_raw(
				self.as_ptr() as *mut _,
				b"notify::packet-timeout\0".as_ptr() as *const _,
				Some(transmute::<_, unsafe extern "C" fn()>(
					notify_packet_timeout_trampoline::<F> as *const (),
				)),
				Box_::into_raw(f),
			)
		}
	}

	#[doc(alias = "socket-buffer")]
	pub fn connect_socket_buffer_notify<F: Fn(&Self) + Send + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId {
		unsafe extern "C" fn notify_socket_buffer_trampoline<F: Fn(&GvStream) + Send + 'static>(
			this: *mut ffi::ArvGvStream,
			_param_spec: glib::ffi::gpointer,
			f: glib::ffi::gpointer,
		) {
			let f: &F = &*(f as *const F);
			f(&from_glib_borrow(this))
		}
		unsafe {
			let f: Box_<F> = Box_::new(f);
			connect_raw(
				self.as_ptr() as *mut _,
				b"notify::socket-buffer\0".as_ptr() as *const _,
				Some(transmute::<_, unsafe extern "C" fn()>(
					notify_socket_buffer_trampoline::<F> as *const (),
				)),
				Box_::into_raw(f),
			)
		}
	}

	#[doc(alias = "socket-buffer-size")]
	pub fn connect_socket_buffer_size_notify<F: Fn(&Self) + Send + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId {
		unsafe extern "C" fn notify_socket_buffer_size_trampoline<
			F: Fn(&GvStream) + Send + 'static,
		>(
			this: *mut ffi::ArvGvStream,
			_param_spec: glib::ffi::gpointer,
			f: glib::ffi::gpointer,
		) {
			let f: &F = &*(f as *const F);
			f(&from_glib_borrow(this))
		}
		unsafe {
			let f: Box_<F> = Box_::new(f);
			connect_raw(
				self.as_ptr() as *mut _,
				b"notify::socket-buffer-size\0".as_ptr() as *const _,
				Some(transmute::<_, unsafe extern "C" fn()>(
					notify_socket_buffer_size_trampoline::<F> as *const (),
				)),
				Box_::into_raw(f),
			)
		}
	}
}

unsafe impl Send for GvStream {}

impl fmt::Display for GvStream {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		f.write_str("GvStream")
	}
}
