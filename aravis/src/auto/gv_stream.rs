// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use aravis_sys;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;
use GvStreamPacketResend;
use GvStreamSocketBuffer;
use Stream;

glib_wrapper! {
	pub struct GvStream(Object<aravis_sys::ArvGvStream, aravis_sys::ArvGvStreamClass, GvStreamClass>) @extends Stream;

	match fn {
		get_type => || aravis_sys::arv_gv_stream_get_type(),
	}
}

pub const NONE_GV_STREAM: Option<&GvStream> = None;

/// Trait containing all `GvStream` methods.
///
/// # Implementors
///
/// [`GvStream`](struct.GvStream.html)
pub trait GvStreamExt: 'static {
	fn get_port(&self) -> u16;

	fn get_statistics(&self) -> (u64, u64);

	fn get_property_frame_retention(&self) -> u32;

	fn set_property_frame_retention(&self, frame_retention: u32);

	fn get_property_packet_request_ratio(&self) -> f64;

	fn set_property_packet_request_ratio(&self, packet_request_ratio: f64);

	fn get_property_packet_resend(&self) -> GvStreamPacketResend;

	fn set_property_packet_resend(&self, packet_resend: GvStreamPacketResend);

	fn get_property_packet_timeout(&self) -> u32;

	fn set_property_packet_timeout(&self, packet_timeout: u32);

	fn get_property_socket_buffer(&self) -> GvStreamSocketBuffer;

	fn set_property_socket_buffer(&self, socket_buffer: GvStreamSocketBuffer);

	fn get_property_socket_buffer_size(&self) -> i32;

	fn set_property_socket_buffer_size(&self, socket_buffer_size: i32);

	fn connect_property_frame_retention_notify<F: Fn(&Self) + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId;

	fn connect_property_packet_request_ratio_notify<F: Fn(&Self) + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId;

	fn connect_property_packet_resend_notify<F: Fn(&Self) + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId;

	fn connect_property_packet_timeout_notify<F: Fn(&Self) + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId;

	fn connect_property_socket_buffer_notify<F: Fn(&Self) + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId;

	fn connect_property_socket_buffer_size_notify<F: Fn(&Self) + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId;
}

impl<O: IsA<GvStream>> GvStreamExt for O {
	fn get_port(&self) -> u16 {
		unsafe { aravis_sys::arv_gv_stream_get_port(self.as_ref().to_glib_none().0) }
	}

	fn get_statistics(&self) -> (u64, u64) {
		unsafe {
			let mut n_resent_packets = mem::MaybeUninit::uninit();
			let mut n_missing_packets = mem::MaybeUninit::uninit();
			aravis_sys::arv_gv_stream_get_statistics(
				self.as_ref().to_glib_none().0,
				n_resent_packets.as_mut_ptr(),
				n_missing_packets.as_mut_ptr(),
			);
			let n_resent_packets = n_resent_packets.assume_init();
			let n_missing_packets = n_missing_packets.assume_init();
			(n_resent_packets, n_missing_packets)
		}
	}

	fn get_property_frame_retention(&self) -> u32 {
		unsafe {
			let mut value = Value::from_type(<u32 as StaticType>::static_type());
			gobject_sys::g_object_get_property(
				self.to_glib_none().0 as *mut gobject_sys::GObject,
				b"frame-retention\0".as_ptr() as *const _,
				value.to_glib_none_mut().0,
			);
			value
				.get()
				.expect("Return Value for property `frame-retention` getter")
				.unwrap()
		}
	}

	fn set_property_frame_retention(&self, frame_retention: u32) {
		unsafe {
			gobject_sys::g_object_set_property(
				self.to_glib_none().0 as *mut gobject_sys::GObject,
				b"frame-retention\0".as_ptr() as *const _,
				Value::from(&frame_retention).to_glib_none().0,
			);
		}
	}

	fn get_property_packet_request_ratio(&self) -> f64 {
		unsafe {
			let mut value = Value::from_type(<f64 as StaticType>::static_type());
			gobject_sys::g_object_get_property(
				self.to_glib_none().0 as *mut gobject_sys::GObject,
				b"packet-request-ratio\0".as_ptr() as *const _,
				value.to_glib_none_mut().0,
			);
			value
				.get()
				.expect("Return Value for property `packet-request-ratio` getter")
				.unwrap()
		}
	}

	fn set_property_packet_request_ratio(&self, packet_request_ratio: f64) {
		unsafe {
			gobject_sys::g_object_set_property(
				self.to_glib_none().0 as *mut gobject_sys::GObject,
				b"packet-request-ratio\0".as_ptr() as *const _,
				Value::from(&packet_request_ratio).to_glib_none().0,
			);
		}
	}

	fn get_property_packet_resend(&self) -> GvStreamPacketResend {
		unsafe {
			let mut value = Value::from_type(<GvStreamPacketResend as StaticType>::static_type());
			gobject_sys::g_object_get_property(
				self.to_glib_none().0 as *mut gobject_sys::GObject,
				b"packet-resend\0".as_ptr() as *const _,
				value.to_glib_none_mut().0,
			);
			value
				.get()
				.expect("Return Value for property `packet-resend` getter")
				.unwrap()
		}
	}

	fn set_property_packet_resend(&self, packet_resend: GvStreamPacketResend) {
		unsafe {
			gobject_sys::g_object_set_property(
				self.to_glib_none().0 as *mut gobject_sys::GObject,
				b"packet-resend\0".as_ptr() as *const _,
				Value::from(&packet_resend).to_glib_none().0,
			);
		}
	}

	fn get_property_packet_timeout(&self) -> u32 {
		unsafe {
			let mut value = Value::from_type(<u32 as StaticType>::static_type());
			gobject_sys::g_object_get_property(
				self.to_glib_none().0 as *mut gobject_sys::GObject,
				b"packet-timeout\0".as_ptr() as *const _,
				value.to_glib_none_mut().0,
			);
			value
				.get()
				.expect("Return Value for property `packet-timeout` getter")
				.unwrap()
		}
	}

	fn set_property_packet_timeout(&self, packet_timeout: u32) {
		unsafe {
			gobject_sys::g_object_set_property(
				self.to_glib_none().0 as *mut gobject_sys::GObject,
				b"packet-timeout\0".as_ptr() as *const _,
				Value::from(&packet_timeout).to_glib_none().0,
			);
		}
	}

	fn get_property_socket_buffer(&self) -> GvStreamSocketBuffer {
		unsafe {
			let mut value = Value::from_type(<GvStreamSocketBuffer as StaticType>::static_type());
			gobject_sys::g_object_get_property(
				self.to_glib_none().0 as *mut gobject_sys::GObject,
				b"socket-buffer\0".as_ptr() as *const _,
				value.to_glib_none_mut().0,
			);
			value
				.get()
				.expect("Return Value for property `socket-buffer` getter")
				.unwrap()
		}
	}

	fn set_property_socket_buffer(&self, socket_buffer: GvStreamSocketBuffer) {
		unsafe {
			gobject_sys::g_object_set_property(
				self.to_glib_none().0 as *mut gobject_sys::GObject,
				b"socket-buffer\0".as_ptr() as *const _,
				Value::from(&socket_buffer).to_glib_none().0,
			);
		}
	}

	fn get_property_socket_buffer_size(&self) -> i32 {
		unsafe {
			let mut value = Value::from_type(<i32 as StaticType>::static_type());
			gobject_sys::g_object_get_property(
				self.to_glib_none().0 as *mut gobject_sys::GObject,
				b"socket-buffer-size\0".as_ptr() as *const _,
				value.to_glib_none_mut().0,
			);
			value
				.get()
				.expect("Return Value for property `socket-buffer-size` getter")
				.unwrap()
		}
	}

	fn set_property_socket_buffer_size(&self, socket_buffer_size: i32) {
		unsafe {
			gobject_sys::g_object_set_property(
				self.to_glib_none().0 as *mut gobject_sys::GObject,
				b"socket-buffer-size\0".as_ptr() as *const _,
				Value::from(&socket_buffer_size).to_glib_none().0,
			);
		}
	}

	fn connect_property_frame_retention_notify<F: Fn(&Self) + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId {
		unsafe extern "C" fn notify_frame_retention_trampoline<P, F: Fn(&P) + 'static>(
			this: *mut aravis_sys::ArvGvStream,
			_param_spec: glib_sys::gpointer,
			f: glib_sys::gpointer,
		) where
			P: IsA<GvStream>,
		{
			let f: &F = &*(f as *const F);
			f(&GvStream::from_glib_borrow(this).unsafe_cast_ref())
		}
		unsafe {
			let f: Box_<F> = Box_::new(f);
			connect_raw(
				self.as_ptr() as *mut _,
				b"notify::frame-retention\0".as_ptr() as *const _,
				Some(transmute::<_, unsafe extern "C" fn()>(
					notify_frame_retention_trampoline::<Self, F> as *const (),
				)),
				Box_::into_raw(f),
			)
		}
	}

	fn connect_property_packet_request_ratio_notify<F: Fn(&Self) + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId {
		unsafe extern "C" fn notify_packet_request_ratio_trampoline<P, F: Fn(&P) + 'static>(
			this: *mut aravis_sys::ArvGvStream,
			_param_spec: glib_sys::gpointer,
			f: glib_sys::gpointer,
		) where
			P: IsA<GvStream>,
		{
			let f: &F = &*(f as *const F);
			f(&GvStream::from_glib_borrow(this).unsafe_cast_ref())
		}
		unsafe {
			let f: Box_<F> = Box_::new(f);
			connect_raw(
				self.as_ptr() as *mut _,
				b"notify::packet-request-ratio\0".as_ptr() as *const _,
				Some(transmute::<_, unsafe extern "C" fn()>(
					notify_packet_request_ratio_trampoline::<Self, F> as *const (),
				)),
				Box_::into_raw(f),
			)
		}
	}

	fn connect_property_packet_resend_notify<F: Fn(&Self) + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId {
		unsafe extern "C" fn notify_packet_resend_trampoline<P, F: Fn(&P) + 'static>(
			this: *mut aravis_sys::ArvGvStream,
			_param_spec: glib_sys::gpointer,
			f: glib_sys::gpointer,
		) where
			P: IsA<GvStream>,
		{
			let f: &F = &*(f as *const F);
			f(&GvStream::from_glib_borrow(this).unsafe_cast_ref())
		}
		unsafe {
			let f: Box_<F> = Box_::new(f);
			connect_raw(
				self.as_ptr() as *mut _,
				b"notify::packet-resend\0".as_ptr() as *const _,
				Some(transmute::<_, unsafe extern "C" fn()>(
					notify_packet_resend_trampoline::<Self, F> as *const (),
				)),
				Box_::into_raw(f),
			)
		}
	}

	fn connect_property_packet_timeout_notify<F: Fn(&Self) + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId {
		unsafe extern "C" fn notify_packet_timeout_trampoline<P, F: Fn(&P) + 'static>(
			this: *mut aravis_sys::ArvGvStream,
			_param_spec: glib_sys::gpointer,
			f: glib_sys::gpointer,
		) where
			P: IsA<GvStream>,
		{
			let f: &F = &*(f as *const F);
			f(&GvStream::from_glib_borrow(this).unsafe_cast_ref())
		}
		unsafe {
			let f: Box_<F> = Box_::new(f);
			connect_raw(
				self.as_ptr() as *mut _,
				b"notify::packet-timeout\0".as_ptr() as *const _,
				Some(transmute::<_, unsafe extern "C" fn()>(
					notify_packet_timeout_trampoline::<Self, F> as *const (),
				)),
				Box_::into_raw(f),
			)
		}
	}

	fn connect_property_socket_buffer_notify<F: Fn(&Self) + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId {
		unsafe extern "C" fn notify_socket_buffer_trampoline<P, F: Fn(&P) + 'static>(
			this: *mut aravis_sys::ArvGvStream,
			_param_spec: glib_sys::gpointer,
			f: glib_sys::gpointer,
		) where
			P: IsA<GvStream>,
		{
			let f: &F = &*(f as *const F);
			f(&GvStream::from_glib_borrow(this).unsafe_cast_ref())
		}
		unsafe {
			let f: Box_<F> = Box_::new(f);
			connect_raw(
				self.as_ptr() as *mut _,
				b"notify::socket-buffer\0".as_ptr() as *const _,
				Some(transmute::<_, unsafe extern "C" fn()>(
					notify_socket_buffer_trampoline::<Self, F> as *const (),
				)),
				Box_::into_raw(f),
			)
		}
	}

	fn connect_property_socket_buffer_size_notify<F: Fn(&Self) + 'static>(
		&self,
		f: F,
	) -> SignalHandlerId {
		unsafe extern "C" fn notify_socket_buffer_size_trampoline<P, F: Fn(&P) + 'static>(
			this: *mut aravis_sys::ArvGvStream,
			_param_spec: glib_sys::gpointer,
			f: glib_sys::gpointer,
		) where
			P: IsA<GvStream>,
		{
			let f: &F = &*(f as *const F);
			f(&GvStream::from_glib_borrow(this).unsafe_cast_ref())
		}
		unsafe {
			let f: Box_<F> = Box_::new(f);
			connect_raw(
				self.as_ptr() as *mut _,
				b"notify::socket-buffer-size\0".as_ptr() as *const _,
				Some(transmute::<_, unsafe extern "C" fn()>(
					notify_socket_buffer_size_trampoline::<Self, F> as *const (),
				)),
				Box_::into_raw(f),
			)
		}
	}
}

impl fmt::Display for GvStream {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		write!(f, "GvStream")
	}
}
