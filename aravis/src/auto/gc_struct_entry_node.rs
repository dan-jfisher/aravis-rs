// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::DomElement;
use crate::DomNode;
use crate::GcFeatureNode;
use crate::GcInteger;
use crate::GcNode;
use crate::GcRegister;
use glib::object::Cast;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
	#[doc(alias = "ArvGcStructEntryNode")]
	pub struct GcStructEntryNode(Object<ffi::ArvGcStructEntryNode, ffi::ArvGcStructEntryNodeClass>) @extends GcFeatureNode, GcNode, DomElement, DomNode, @implements GcInteger, GcRegister;

	match fn {
		type_ => || ffi::arv_gc_struct_entry_node_get_type(),
	}
}

impl GcStructEntryNode {
	///
	/// # Returns
	///
	/// a newly created [`GcStructEntryNode`][crate::GcStructEntryNode].
	#[doc(alias = "arv_gc_struct_entry_node_new")]
	pub fn new() -> GcStructEntryNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_struct_entry_node_new()).unsafe_cast() }
	}
}

impl Default for GcStructEntryNode {
	fn default() -> Self {
		Self::new()
	}
}

unsafe impl Send for GcStructEntryNode {}

impl fmt::Display for GcStructEntryNode {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		f.write_str("GcStructEntryNode")
	}
}
