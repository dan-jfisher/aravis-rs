// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use aravis_sys;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use GcFeatureNode;

glib_wrapper! {
	pub struct GcSelector(Interface<aravis_sys::ArvGcSelector>);

	match fn {
		get_type => || aravis_sys::arv_gc_selector_get_type(),
	}
}

unsafe impl Send for GcSelector {}

pub const NONE_GC_SELECTOR: Option<&GcSelector> = None;

/// Trait containing all `GcSelector` methods.
///
/// # Implementors
///
/// [`GcEnumeration`](struct.GcEnumeration.html), [`GcIntRegNode`](struct.GcIntRegNode.html), [`GcIntegerNode`](struct.GcIntegerNode.html), [`GcMaskedIntRegNode`](struct.GcMaskedIntRegNode.html), [`GcSelector`](struct.GcSelector.html)
pub trait GcSelectorExt: 'static {
	///
	/// # Returns
	///
	/// a list of selected `GcFeatureNode`
	fn get_selected_features(&self) -> Vec<GcFeatureNode>;

	///
	/// # Returns
	///
	/// `true` if this node is a selector, i.e. it has pSelected childs.
	fn is_selector(&self) -> bool;
}

impl<O: IsA<GcSelector>> GcSelectorExt for O {
	fn get_selected_features(&self) -> Vec<GcFeatureNode> {
		unsafe {
			FromGlibPtrContainer::from_glib_none(aravis_sys::arv_gc_selector_get_selected_features(
				self.as_ref().to_glib_none().0,
			))
		}
	}

	fn is_selector(&self) -> bool {
		unsafe {
			from_glib(aravis_sys::arv_gc_selector_is_selector(
				self.as_ref().to_glib_none().0,
			))
		}
	}
}

impl fmt::Display for GcSelector {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		write!(f, "GcSelector")
	}
}
