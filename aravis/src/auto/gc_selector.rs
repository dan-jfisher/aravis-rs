// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use GcFeatureNode;
use aravis_sys;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct GcSelector(Interface<aravis_sys::ArvGcSelector>);

    match fn {
        get_type => || aravis_sys::arv_gc_selector_get_type(),
    }
}

pub const NONE_GC_SELECTOR: Option<&GcSelector> = None;

pub trait GcSelectorExt: 'static {
    fn get_selected_features(&self) -> Vec<GcFeatureNode>;

    fn is_selector(&self) -> bool;
}

impl<O: IsA<GcSelector>> GcSelectorExt for O {
    fn get_selected_features(&self) -> Vec<GcFeatureNode> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(aravis_sys::arv_gc_selector_get_selected_features(self.as_ref().to_glib_none().0))
        }
    }

    fn is_selector(&self) -> bool {
        unsafe {
            from_glib(aravis_sys::arv_gc_selector_is_selector(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for GcSelector {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "GcSelector")
    }
}
