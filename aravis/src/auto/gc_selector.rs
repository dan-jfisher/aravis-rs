// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::GcFeatureNode;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
	#[doc(alias = "ArvGcSelector")]
	pub struct GcSelector(Interface<ffi::ArvGcSelector, ffi::ArvGcSelectorInterface>);

	match fn {
		type_ => || ffi::arv_gc_selector_get_type(),
	}
}

unsafe impl Send for GcSelector {}

pub const NONE_GC_SELECTOR: Option<&GcSelector> = None;

/// Trait containing all [`struct@GcSelector`] methods.
///
/// # Implementors
///
/// [`GcEnumeration`][struct@crate::GcEnumeration], [`GcIntRegNode`][struct@crate::GcIntRegNode], [`GcIntegerNode`][struct@crate::GcIntegerNode], [`GcMaskedIntRegNode`][struct@crate::GcMaskedIntRegNode], [`GcSelector`][struct@crate::GcSelector]
pub trait GcSelectorExt: 'static {
	///
	/// # Returns
	///
	/// a list of selected [`GcFeatureNode`][crate::GcFeatureNode]
	#[doc(alias = "arv_gc_selector_get_selected_features")]
	#[doc(alias = "get_selected_features")]
	fn selected_features(&self) -> Vec<GcFeatureNode>;

	///
	/// # Returns
	///
	/// [`true`] if this node is a selector, i.e. it has pSelected childs.
	#[doc(alias = "arv_gc_selector_is_selector")]
	fn is_selector(&self) -> bool;
}

impl<O: IsA<GcSelector>> GcSelectorExt for O {
	fn selected_features(&self) -> Vec<GcFeatureNode> {
		unsafe {
			FromGlibPtrContainer::from_glib_none(ffi::arv_gc_selector_get_selected_features(
				self.as_ref().to_glib_none().0,
			))
		}
	}

	fn is_selector(&self) -> bool {
		unsafe {
			from_glib(ffi::arv_gc_selector_is_selector(
				self.as_ref().to_glib_none().0,
			))
		}
	}
}

impl fmt::Display for GcSelector {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		f.write_str("GcSelector")
	}
}
