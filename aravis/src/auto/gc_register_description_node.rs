// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use aravis_sys;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use glib::GString;
use std::fmt;
use DomElement;
use DomNode;
use GcFeatureNode;
use GcNode;

glib_wrapper! {
	pub struct GcRegisterDescriptionNode(Object<aravis_sys::ArvGcRegisterDescriptionNode, aravis_sys::ArvGcRegisterDescriptionNodeClass, GcRegisterDescriptionNodeClass>) @extends GcFeatureNode, GcNode, DomElement, DomNode;

	match fn {
		get_type => || aravis_sys::arv_gc_register_description_node_get_type(),
	}
}

impl GcRegisterDescriptionNode {
	pub fn new() -> GcRegisterDescriptionNode {
		assert_initialized_main_thread!();
		unsafe {
			GcNode::from_glib_full(aravis_sys::arv_gc_register_description_node_new()).unsafe_cast()
		}
	}
}

impl Default for GcRegisterDescriptionNode {
	fn default() -> Self {
		Self::new()
	}
}

unsafe impl Send for GcRegisterDescriptionNode {}

pub const NONE_GC_REGISTER_DESCRIPTION_NODE: Option<&GcRegisterDescriptionNode> = None;

/// Trait containing all `GcRegisterDescriptionNode` methods.
///
/// # Implementors
///
/// [`GcRegisterDescriptionNode`](struct.GcRegisterDescriptionNode.html)
pub trait GcRegisterDescriptionNodeExt: 'static {
	/// Checks if the Genicam document version is higher or equal to the given version.
	/// ## `required_major`
	/// required major version number
	/// ## `required_minor`
	/// required minor version number
	/// ## `required_subminor`
	/// required sub minor version number
	///
	/// # Returns
	///
	/// True if document version is higher or equal than the given version.
	fn check_schema_version(
		&self,
		required_major: u32,
		required_minor: u32,
		required_subminor: u32,
	) -> bool;

	/// Compare the Genicam document version to the given version.
	/// ## `major`
	/// major version number
	/// ## `minor`
	/// minor version number
	/// ## `subminor`
	/// sub minor version number
	///
	/// # Returns
	///
	/// -1 if document version is lower than the given version, 0 if equal and 1 if greater.
	fn compare_schema_version(&self, major: u32, minor: u32, subminor: u32) -> i32;

	/// Gets Genicam document major version.
	///
	/// # Returns
	///
	/// Major version.
	fn get_major_version(&self) -> u32;

	/// Gets Genicam document minor version.
	///
	/// # Returns
	///
	/// Minor version.
	fn get_minor_version(&self) -> u32;

	/// Gets camera model name for given Genicam document.
	///
	/// # Returns
	///
	/// Model name string.
	fn get_model_name(&self) -> Option<GString>;

	/// Gets Genicam document schema major version.
	///
	/// # Returns
	///
	/// Schema major version.
	fn get_schema_major_version(&self) -> u32;

	/// Gets Genicam document schema minor version.
	///
	/// # Returns
	///
	/// Schema minor version.
	fn get_schema_minor_version(&self) -> u32;

	/// Gets Genicam document schema sub minor version.
	///
	/// # Returns
	///
	/// Schema sub minor version.
	fn get_schema_subminor_version(&self) -> u32;

	/// Gets Genicam document sub minor version.
	///
	/// # Returns
	///
	/// Sub minor version.
	fn get_subminor_version(&self) -> u32;

	/// Gets camera vendor name for given Genicam document.
	///
	/// # Returns
	///
	/// Vendor name string.
	fn get_vendor_name(&self) -> Option<GString>;
}

impl<O: IsA<GcRegisterDescriptionNode>> GcRegisterDescriptionNodeExt for O {
	fn check_schema_version(
		&self,
		required_major: u32,
		required_minor: u32,
		required_subminor: u32,
	) -> bool {
		unsafe {
			from_glib(
				aravis_sys::arv_gc_register_description_node_check_schema_version(
					self.as_ref().to_glib_none().0,
					required_major,
					required_minor,
					required_subminor,
				),
			)
		}
	}

	fn compare_schema_version(&self, major: u32, minor: u32, subminor: u32) -> i32 {
		unsafe {
			aravis_sys::arv_gc_register_description_node_compare_schema_version(
				self.as_ref().to_glib_none().0,
				major,
				minor,
				subminor,
			)
		}
	}

	fn get_major_version(&self) -> u32 {
		unsafe {
			aravis_sys::arv_gc_register_description_node_get_major_version(
				self.as_ref().to_glib_none().0,
			)
		}
	}

	fn get_minor_version(&self) -> u32 {
		unsafe {
			aravis_sys::arv_gc_register_description_node_get_minor_version(
				self.as_ref().to_glib_none().0,
			)
		}
	}

	fn get_model_name(&self) -> Option<GString> {
		unsafe {
			from_glib_full(aravis_sys::arv_gc_register_description_node_get_model_name(
				self.as_ref().to_glib_none().0,
			))
		}
	}

	fn get_schema_major_version(&self) -> u32 {
		unsafe {
			aravis_sys::arv_gc_register_description_node_get_schema_major_version(
				self.as_ref().to_glib_none().0,
			)
		}
	}

	fn get_schema_minor_version(&self) -> u32 {
		unsafe {
			aravis_sys::arv_gc_register_description_node_get_schema_minor_version(
				self.as_ref().to_glib_none().0,
			)
		}
	}

	fn get_schema_subminor_version(&self) -> u32 {
		unsafe {
			aravis_sys::arv_gc_register_description_node_get_schema_subminor_version(
				self.as_ref().to_glib_none().0,
			)
		}
	}

	fn get_subminor_version(&self) -> u32 {
		unsafe {
			aravis_sys::arv_gc_register_description_node_get_subminor_version(
				self.as_ref().to_glib_none().0,
			)
		}
	}

	fn get_vendor_name(&self) -> Option<GString> {
		unsafe {
			from_glib_full(
				aravis_sys::arv_gc_register_description_node_get_vendor_name(
					self.as_ref().to_glib_none().0,
				),
			)
		}
	}
}

impl fmt::Display for GcRegisterDescriptionNode {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		write!(f, "GcRegisterDescriptionNode")
	}
}
