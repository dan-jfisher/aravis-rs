// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use aravis_sys;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use DomNode;

glib_wrapper! {
	pub struct DomNodeList(Object<aravis_sys::ArvDomNodeList, aravis_sys::ArvDomNodeListClass, DomNodeListClass>);

	match fn {
		get_type => || aravis_sys::arv_dom_node_list_get_type(),
	}
}

unsafe impl Send for DomNodeList {}

pub const NONE_DOM_NODE_LIST: Option<&DomNodeList> = None;

/// Trait containing all `DomNodeList` methods.
///
/// # Implementors
///
/// [`DomNodeList`](struct.DomNodeList.html)
pub trait DomNodeListExt: 'static {
	/// Get one of the item of `self`.
	/// ## `index`
	/// item index
	///
	/// # Returns
	///
	/// item corresponding to index, NULL on error.
	fn get_item(&self, index: u32) -> Option<DomNode>;

	fn get_length(&self) -> u32;
}

impl<O: IsA<DomNodeList>> DomNodeListExt for O {
	fn get_item(&self, index: u32) -> Option<DomNode> {
		unsafe {
			from_glib_none(aravis_sys::arv_dom_node_list_get_item(
				self.as_ref().to_glib_none().0,
				index,
			))
		}
	}

	fn get_length(&self) -> u32 {
		unsafe { aravis_sys::arv_dom_node_list_get_length(self.as_ref().to_glib_none().0) }
	}
}

impl fmt::Display for DomNodeList {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		write!(f, "DomNodeList")
	}
}
