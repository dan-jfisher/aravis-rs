// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::DomNode;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
	#[doc(alias = "ArvDomNodeList")]
	pub struct DomNodeList(Object<ffi::ArvDomNodeList, ffi::ArvDomNodeListClass>);

	match fn {
		type_ => || ffi::arv_dom_node_list_get_type(),
	}
}

unsafe impl Send for DomNodeList {}

pub const NONE_DOM_NODE_LIST: Option<&DomNodeList> = None;

/// Trait containing all [`struct@DomNodeList`] methods.
///
/// # Implementors
///
/// [`DomNodeChildList`][struct@crate::DomNodeChildList], [`DomNodeList`][struct@crate::DomNodeList]
pub trait DomNodeListExt: 'static {
	/// Get one of the item of `self`.
	/// ## `index`
	/// item index
	///
	/// # Returns
	///
	/// item corresponding to index, NULL on error.
	#[doc(alias = "arv_dom_node_list_get_item")]
	#[doc(alias = "get_item")]
	fn item(&self, index: u32) -> Option<DomNode>;

	#[doc(alias = "arv_dom_node_list_get_length")]
	#[doc(alias = "get_length")]
	fn length(&self) -> u32;
}

impl<O: IsA<DomNodeList>> DomNodeListExt for O {
	fn item(&self, index: u32) -> Option<DomNode> {
		unsafe {
			from_glib_none(ffi::arv_dom_node_list_get_item(
				self.as_ref().to_glib_none().0,
				index,
			))
		}
	}

	fn length(&self) -> u32 {
		unsafe { ffi::arv_dom_node_list_get_length(self.as_ref().to_glib_none().0) }
	}
}

impl fmt::Display for DomNodeList {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		f.write_str("DomNodeList")
	}
}
