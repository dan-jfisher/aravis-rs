// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::DomElement;
use crate::DomNode;
use crate::GcAccessMode;
use crate::GcCachable;
use crate::GcDisplayNotation;
use crate::GcNode;
use crate::GcPropertyNodeType;
use crate::GcRepresentation;
use crate::GcSignedness;
use crate::GcVisibility;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib::wrapper! {
	#[doc(alias = "ArvGcPropertyNode")]
	pub struct GcPropertyNode(Object<ffi::ArvGcPropertyNode, ffi::ArvGcPropertyNodeClass>) @extends GcNode, DomElement, DomNode;

	match fn {
		type_ => || ffi::arv_gc_property_node_get_type(),
	}
}

impl GcPropertyNode {
	#[doc(alias = "arv_gc_property_node_new_access_mode")]
	pub fn new_access_mode() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_access_mode()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_address")]
	pub fn new_address() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_address()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_bit")]
	pub fn new_bit() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_bit()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_cachable")]
	pub fn new_cachable() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_cachable()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_chunk_id")]
	pub fn new_chunk_id() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_chunk_id()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_command_value")]
	pub fn new_command_value() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe {
			GcNode::from_glib_full(ffi::arv_gc_property_node_new_command_value()).unsafe_cast()
		}
	}

	#[doc(alias = "arv_gc_property_node_new_constant")]
	pub fn new_constant() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_constant()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_description")]
	pub fn new_description() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_description()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_display_name")]
	pub fn new_display_name() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe {
			GcNode::from_glib_full(ffi::arv_gc_property_node_new_display_name()).unsafe_cast()
		}
	}

	#[doc(alias = "arv_gc_property_node_new_display_notation")]
	pub fn new_display_notation() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe {
			GcNode::from_glib_full(ffi::arv_gc_property_node_new_display_notation()).unsafe_cast()
		}
	}

	#[doc(alias = "arv_gc_property_node_new_display_precision")]
	pub fn new_display_precision() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe {
			GcNode::from_glib_full(ffi::arv_gc_property_node_new_display_precision()).unsafe_cast()
		}
	}

	#[doc(alias = "arv_gc_property_node_new_endianness")]
	pub fn new_endianness() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_endianness()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_event_id")]
	pub fn new_event_id() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_event_id()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_expression")]
	pub fn new_expression() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_expression()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_formula")]
	#[doc(alias = "new_formula")]
	pub fn formula() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_formula()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_formula_from")]
	#[doc(alias = "new_formula_from")]
	pub fn formula_from() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe {
			GcNode::from_glib_full(ffi::arv_gc_property_node_new_formula_from()).unsafe_cast()
		}
	}

	#[doc(alias = "arv_gc_property_node_new_formula_to")]
	#[doc(alias = "new_formula_to")]
	pub fn formula_to() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_formula_to()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_imposed_access_mode")]
	pub fn new_imposed_access_mode() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe {
			GcNode::from_glib_full(ffi::arv_gc_property_node_new_imposed_access_mode())
				.unsafe_cast()
		}
	}

	#[doc(alias = "arv_gc_property_node_new_increment")]
	pub fn new_increment() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_increment()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_is_linear")]
	pub fn new_is_linear() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_is_linear()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_length")]
	pub fn new_length() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_length()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_lsb")]
	pub fn new_lsb() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_lsb()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_maximum")]
	pub fn new_maximum() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_maximum()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_minimum")]
	pub fn new_minimum() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_minimum()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_msb")]
	pub fn new_msb() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_msb()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_off_value")]
	pub fn new_off_value() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_off_value()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_on_value")]
	pub fn new_on_value() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_on_value()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_p_address")]
	pub fn new_p_address() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_p_address()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_p_command_value")]
	pub fn new_p_command_value() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe {
			GcNode::from_glib_full(ffi::arv_gc_property_node_new_p_command_value()).unsafe_cast()
		}
	}

	#[doc(alias = "arv_gc_property_node_new_p_feature")]
	pub fn new_p_feature() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_p_feature()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_p_increment")]
	pub fn new_p_increment() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_p_increment()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_p_is_available")]
	pub fn new_p_is_available() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe {
			GcNode::from_glib_full(ffi::arv_gc_property_node_new_p_is_available()).unsafe_cast()
		}
	}

	#[doc(alias = "arv_gc_property_node_new_p_is_implemented")]
	pub fn new_p_is_implemented() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe {
			GcNode::from_glib_full(ffi::arv_gc_property_node_new_p_is_implemented()).unsafe_cast()
		}
	}

	#[doc(alias = "arv_gc_property_node_new_p_is_locked")]
	pub fn new_p_is_locked() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_p_is_locked()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_p_length")]
	pub fn new_p_length() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_p_length()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_p_maximum")]
	pub fn new_p_maximum() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_p_maximum()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_p_minimum")]
	pub fn new_p_minimum() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_p_minimum()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_p_port")]
	pub fn new_p_port() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_p_port()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_p_selected")]
	pub fn new_p_selected() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_p_selected()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_p_value")]
	pub fn new_p_value() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_p_value()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_p_value_default")]
	pub fn new_p_value_default() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe {
			GcNode::from_glib_full(ffi::arv_gc_property_node_new_p_value_default()).unsafe_cast()
		}
	}

	#[doc(alias = "arv_gc_property_node_new_p_variable")]
	pub fn new_p_variable() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_p_variable()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_polling_time")]
	pub fn new_polling_time() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe {
			GcNode::from_glib_full(ffi::arv_gc_property_node_new_polling_time()).unsafe_cast()
		}
	}

	#[doc(alias = "arv_gc_property_node_new_representation")]
	pub fn new_representation() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe {
			GcNode::from_glib_full(ffi::arv_gc_property_node_new_representation()).unsafe_cast()
		}
	}

	#[doc(alias = "arv_gc_property_node_new_sign")]
	pub fn new_sign() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_sign()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_slope")]
	pub fn new_slope() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_slope()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_streamable")]
	pub fn new_streamable() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_streamable()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_tooltip")]
	pub fn new_tooltip() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_tooltip()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_unit")]
	pub fn new_unit() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_unit()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_value")]
	pub fn new_value() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_value()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_property_node_new_value_default")]
	pub fn new_value_default() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe {
			GcNode::from_glib_full(ffi::arv_gc_property_node_new_value_default()).unsafe_cast()
		}
	}

	#[doc(alias = "arv_gc_property_node_new_visibility")]
	pub fn new_visibility() -> GcPropertyNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_property_node_new_visibility()).unsafe_cast() }
	}
}

unsafe impl Send for GcPropertyNode {}

pub const NONE_GC_PROPERTY_NODE: Option<&GcPropertyNode> = None;

/// Trait containing all [`struct@GcPropertyNode`] methods.
///
/// # Implementors
///
/// [`GcIndexNode`][struct@crate::GcIndexNode], [`GcInvalidatorNode`][struct@crate::GcInvalidatorNode], [`GcPropertyNode`][struct@crate::GcPropertyNode], [`GcValueIndexedNode`][struct@crate::GcValueIndexedNode]
pub trait GcPropertyNodeExt: 'static {
	#[doc(alias = "arv_gc_property_node_get_access_mode")]
	#[doc(alias = "get_access_mode")]
	fn access_mode(&self, default_value: GcAccessMode) -> GcAccessMode;

	#[doc(alias = "arv_gc_property_node_get_cachable")]
	#[doc(alias = "get_cachable")]
	fn cachable(&self, default_value: GcCachable) -> GcCachable;

	#[doc(alias = "arv_gc_property_node_get_display_notation")]
	#[doc(alias = "get_display_notation")]
	fn display_notation(&self, default_value: GcDisplayNotation) -> GcDisplayNotation;

	#[doc(alias = "arv_gc_property_node_get_display_precision")]
	#[doc(alias = "get_display_precision")]
	fn display_precision(&self, default_value: i64) -> i64;

	#[doc(alias = "arv_gc_property_node_get_double")]
	#[doc(alias = "get_double")]
	fn double(&self) -> Result<f64, glib::Error>;

	#[doc(alias = "arv_gc_property_node_get_endianness")]
	#[doc(alias = "get_endianness")]
	fn endianness(&self, default_value: u32) -> u32;

	#[doc(alias = "arv_gc_property_node_get_int64")]
	#[doc(alias = "get_int64")]
	fn int64(&self) -> Result<i64, glib::Error>;

	///
	/// # Returns
	///
	/// the [`GcNode`][crate::GcNode] which `self` points to, [`None`] if the property is not a pointer.
	#[doc(alias = "arv_gc_property_node_get_linked_node")]
	#[doc(alias = "get_linked_node")]
	fn linked_node(&self) -> Option<GcNode>;

	#[doc(alias = "arv_gc_property_node_get_lsb")]
	#[doc(alias = "get_lsb")]
	fn lsb(&self, default_value: u32) -> u32;

	#[doc(alias = "arv_gc_property_node_get_msb")]
	#[doc(alias = "get_msb")]
	fn msb(&self, default_value: u32) -> u32;

	///
	/// # Returns
	///
	/// node Name property value.
	#[doc(alias = "arv_gc_property_node_get_name")]
	#[doc(alias = "get_name")]
	fn name(&self) -> Option<glib::GString>;

	#[doc(alias = "arv_gc_property_node_get_node_type")]
	#[doc(alias = "get_node_type")]
	fn node_type(&self) -> GcPropertyNodeType;

	#[doc(alias = "arv_gc_property_node_get_representation")]
	#[doc(alias = "get_representation")]
	fn representation(&self, default_value: GcRepresentation) -> GcRepresentation;

	#[doc(alias = "arv_gc_property_node_get_sign")]
	#[doc(alias = "get_sign")]
	fn sign(&self, default_value: GcSignedness) -> GcSignedness;

	//#[cfg(any(feature = "v0_8_8", feature = "dox"))]
	//#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8_8")))]
	//#[doc(alias = "arv_gc_property_node_get_streamable")]
	//#[doc(alias = "get_streamable")]
	//fn streamable(&self, default_value: /*Ignored*/GcStreamable) -> /*Ignored*/GcStreamable;

	#[doc(alias = "arv_gc_property_node_get_string")]
	#[doc(alias = "get_string")]
	fn string(&self) -> Result<glib::GString, glib::Error>;

	#[doc(alias = "arv_gc_property_node_get_visibility")]
	#[doc(alias = "get_visibility")]
	fn visibility(&self, default_value: GcVisibility) -> GcVisibility;

	#[doc(alias = "arv_gc_property_node_set_double")]
	fn set_double(&self, v_double: f64) -> Result<(), glib::Error>;

	#[doc(alias = "arv_gc_property_node_set_int64")]
	fn set_int64(&self, v_int64: i64) -> Result<(), glib::Error>;

	#[doc(alias = "arv_gc_property_node_set_string")]
	fn set_string(&self, string: &str) -> Result<(), glib::Error>;
}

impl<O: IsA<GcPropertyNode>> GcPropertyNodeExt for O {
	fn access_mode(&self, default_value: GcAccessMode) -> GcAccessMode {
		unsafe {
			from_glib(ffi::arv_gc_property_node_get_access_mode(
				self.as_ref().to_glib_none().0,
				default_value.into_glib(),
			))
		}
	}

	fn cachable(&self, default_value: GcCachable) -> GcCachable {
		unsafe {
			from_glib(ffi::arv_gc_property_node_get_cachable(
				self.as_ref().to_glib_none().0,
				default_value.into_glib(),
			))
		}
	}

	fn display_notation(&self, default_value: GcDisplayNotation) -> GcDisplayNotation {
		unsafe {
			from_glib(ffi::arv_gc_property_node_get_display_notation(
				self.as_ref().to_glib_none().0,
				default_value.into_glib(),
			))
		}
	}

	fn display_precision(&self, default_value: i64) -> i64 {
		unsafe {
			ffi::arv_gc_property_node_get_display_precision(
				self.as_ref().to_glib_none().0,
				default_value,
			)
		}
	}

	fn double(&self) -> Result<f64, glib::Error> {
		unsafe {
			let mut error = ptr::null_mut();
			let ret =
				ffi::arv_gc_property_node_get_double(self.as_ref().to_glib_none().0, &mut error);
			if error.is_null() {
				Ok(ret)
			} else {
				Err(from_glib_full(error))
			}
		}
	}

	fn endianness(&self, default_value: u32) -> u32 {
		unsafe {
			ffi::arv_gc_property_node_get_endianness(self.as_ref().to_glib_none().0, default_value)
		}
	}

	fn int64(&self) -> Result<i64, glib::Error> {
		unsafe {
			let mut error = ptr::null_mut();
			let ret =
				ffi::arv_gc_property_node_get_int64(self.as_ref().to_glib_none().0, &mut error);
			if error.is_null() {
				Ok(ret)
			} else {
				Err(from_glib_full(error))
			}
		}
	}

	fn linked_node(&self) -> Option<GcNode> {
		unsafe {
			from_glib_none(ffi::arv_gc_property_node_get_linked_node(
				self.as_ref().to_glib_none().0,
			))
		}
	}

	fn lsb(&self, default_value: u32) -> u32 {
		unsafe { ffi::arv_gc_property_node_get_lsb(self.as_ref().to_glib_none().0, default_value) }
	}

	fn msb(&self, default_value: u32) -> u32 {
		unsafe { ffi::arv_gc_property_node_get_msb(self.as_ref().to_glib_none().0, default_value) }
	}

	fn name(&self) -> Option<glib::GString> {
		unsafe {
			from_glib_none(ffi::arv_gc_property_node_get_name(
				self.as_ref().to_glib_none().0,
			))
		}
	}

	fn node_type(&self) -> GcPropertyNodeType {
		unsafe {
			from_glib(ffi::arv_gc_property_node_get_node_type(
				self.as_ref().to_glib_none().0,
			))
		}
	}

	fn representation(&self, default_value: GcRepresentation) -> GcRepresentation {
		unsafe {
			from_glib(ffi::arv_gc_property_node_get_representation(
				self.as_ref().to_glib_none().0,
				default_value.into_glib(),
			))
		}
	}

	fn sign(&self, default_value: GcSignedness) -> GcSignedness {
		unsafe {
			from_glib(ffi::arv_gc_property_node_get_sign(
				self.as_ref().to_glib_none().0,
				default_value.into_glib(),
			))
		}
	}

	//#[cfg(any(feature = "v0_8_8", feature = "dox"))]
	//#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8_8")))]
	//fn streamable(&self, default_value: /*Ignored*/GcStreamable) -> /*Ignored*/GcStreamable {
	//    unsafe { TODO: call ffi:arv_gc_property_node_get_streamable() }
	//}

	fn string(&self) -> Result<glib::GString, glib::Error> {
		unsafe {
			let mut error = ptr::null_mut();
			let ret =
				ffi::arv_gc_property_node_get_string(self.as_ref().to_glib_none().0, &mut error);
			if error.is_null() {
				Ok(from_glib_none(ret))
			} else {
				Err(from_glib_full(error))
			}
		}
	}

	fn visibility(&self, default_value: GcVisibility) -> GcVisibility {
		unsafe {
			from_glib(ffi::arv_gc_property_node_get_visibility(
				self.as_ref().to_glib_none().0,
				default_value.into_glib(),
			))
		}
	}

	fn set_double(&self, v_double: f64) -> Result<(), glib::Error> {
		unsafe {
			let mut error = ptr::null_mut();
			let _ = ffi::arv_gc_property_node_set_double(
				self.as_ref().to_glib_none().0,
				v_double,
				&mut error,
			);
			if error.is_null() {
				Ok(())
			} else {
				Err(from_glib_full(error))
			}
		}
	}

	fn set_int64(&self, v_int64: i64) -> Result<(), glib::Error> {
		unsafe {
			let mut error = ptr::null_mut();
			let _ = ffi::arv_gc_property_node_set_int64(
				self.as_ref().to_glib_none().0,
				v_int64,
				&mut error,
			);
			if error.is_null() {
				Ok(())
			} else {
				Err(from_glib_full(error))
			}
		}
	}

	fn set_string(&self, string: &str) -> Result<(), glib::Error> {
		unsafe {
			let mut error = ptr::null_mut();
			let _ = ffi::arv_gc_property_node_set_string(
				self.as_ref().to_glib_none().0,
				string.to_glib_none().0,
				&mut error,
			);
			if error.is_null() {
				Ok(())
			} else {
				Err(from_glib_full(error))
			}
		}
	}
}

impl fmt::Display for GcPropertyNode {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		f.write_str("GcPropertyNode")
	}
}
