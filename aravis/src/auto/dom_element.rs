// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::DomNode;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
	#[doc(alias = "ArvDomElement")]
	pub struct DomElement(Object<ffi::ArvDomElement, ffi::ArvDomElementClass>) @extends DomNode;

	match fn {
		type_ => || ffi::arv_dom_element_get_type(),
	}
}

unsafe impl Send for DomElement {}

pub const NONE_DOM_ELEMENT: Option<&DomElement> = None;

/// Trait containing all [`struct@DomElement`] methods.
///
/// # Implementors
///
/// [`DomElement`][struct@crate::DomElement], [`GcNode`][struct@crate::GcNode]
pub trait DomElementExt: 'static {
	#[doc(alias = "arv_dom_element_get_attribute")]
	#[doc(alias = "get_attribute")]
	fn attribute(&self, name: &str) -> Option<glib::GString>;

	#[doc(alias = "arv_dom_element_get_tag_name")]
	#[doc(alias = "get_tag_name")]
	fn tag_name(&self) -> Option<glib::GString>;

	#[doc(alias = "arv_dom_element_set_attribute")]
	fn set_attribute(&self, name: &str, attribute_value: &str);
}

impl<O: IsA<DomElement>> DomElementExt for O {
	fn attribute(&self, name: &str) -> Option<glib::GString> {
		unsafe {
			from_glib_none(ffi::arv_dom_element_get_attribute(
				self.as_ref().to_glib_none().0,
				name.to_glib_none().0,
			))
		}
	}

	fn tag_name(&self) -> Option<glib::GString> {
		unsafe {
			from_glib_none(ffi::arv_dom_element_get_tag_name(
				self.as_ref().to_glib_none().0,
			))
		}
	}

	fn set_attribute(&self, name: &str, attribute_value: &str) {
		unsafe {
			ffi::arv_dom_element_set_attribute(
				self.as_ref().to_glib_none().0,
				name.to_glib_none().0,
				attribute_value.to_glib_none().0,
			);
		}
	}
}

impl fmt::Display for DomElement {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		f.write_str("DomElement")
	}
}
