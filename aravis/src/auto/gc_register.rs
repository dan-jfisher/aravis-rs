// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use aravis_sys;
use glib;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib_wrapper! {
	pub struct GcRegister(Interface<aravis_sys::ArvGcRegister>);

	match fn {
		get_type => || aravis_sys::arv_gc_register_get_type(),
	}
}

unsafe impl Send for GcRegister {}

pub const NONE_GC_REGISTER: Option<&GcRegister> = None;

/// Trait containing all `GcRegister` methods.
///
/// # Implementors
///
/// [`GcFloatRegNode`](struct.GcFloatRegNode.html), [`GcIntRegNode`](struct.GcIntRegNode.html), [`GcMaskedIntRegNode`](struct.GcMaskedIntRegNode.html), [`GcRegisterNode`](struct.GcRegisterNode.html), [`GcRegister`](struct.GcRegister.html), [`GcStringRegNode`](struct.GcStringRegNode.html), [`GcStructEntryNode`](struct.GcStructEntryNode.html), [`GcStructRegNode`](struct.GcStructRegNode.html)
pub trait GcRegisterExt: 'static {
	//fn get(&self, buffer: /*Unimplemented*/Option<Fundamental: Pointer>, length: u64) -> Result<(), glib::Error>;

	fn get_address(&self) -> Result<u64, glib::Error>;

	fn get_length(&self) -> Result<u64, glib::Error>;

	//fn set(&self, buffer: /*Unimplemented*/Option<Fundamental: Pointer>, length: u64) -> Result<(), glib::Error>;
}

impl<O: IsA<GcRegister>> GcRegisterExt for O {
	//fn get(&self, buffer: /*Unimplemented*/Option<Fundamental: Pointer>, length: u64) -> Result<(), glib::Error> {
	//    unsafe { TODO: call aravis_sys:arv_gc_register_get() }
	//}

	fn get_address(&self) -> Result<u64, glib::Error> {
		unsafe {
			let mut error = ptr::null_mut();
			let ret =
				aravis_sys::arv_gc_register_get_address(self.as_ref().to_glib_none().0, &mut error);
			if error.is_null() {
				Ok(ret)
			} else {
				Err(from_glib_full(error))
			}
		}
	}

	fn get_length(&self) -> Result<u64, glib::Error> {
		unsafe {
			let mut error = ptr::null_mut();
			let ret =
				aravis_sys::arv_gc_register_get_length(self.as_ref().to_glib_none().0, &mut error);
			if error.is_null() {
				Ok(ret)
			} else {
				Err(from_glib_full(error))
			}
		}
	}

	//fn set(&self, buffer: /*Unimplemented*/Option<Fundamental: Pointer>, length: u64) -> Result<(), glib::Error> {
	//    unsafe { TODO: call aravis_sys:arv_gc_register_set() }
	//}
}

impl fmt::Display for GcRegister {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		write!(f, "GcRegister")
	}
}
