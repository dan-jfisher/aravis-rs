// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use aravis_sys;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use DomElement;
use DomNode;
use GcNode;
use GcPropertyNode;

glib_wrapper! {
	pub struct GcValueIndexedNode(Object<aravis_sys::ArvGcValueIndexedNode, aravis_sys::ArvGcValueIndexedNodeClass, GcValueIndexedNodeClass>) @extends GcPropertyNode, GcNode, DomElement, DomNode;

	match fn {
		get_type => || aravis_sys::arv_gc_value_indexed_node_get_type(),
	}
}

impl GcValueIndexedNode {
	pub fn new() -> GcValueIndexedNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(aravis_sys::arv_gc_value_indexed_node_new()).unsafe_cast() }
	}
}

impl Default for GcValueIndexedNode {
	fn default() -> Self {
		Self::new()
	}
}

pub const NONE_GC_VALUE_INDEXED_NODE: Option<&GcValueIndexedNode> = None;

/// Trait containing all `GcValueIndexedNode` methods.
///
/// # Implementors
///
/// [`GcValueIndexedNode`](struct.GcValueIndexedNode.html)
pub trait GcValueIndexedNodeExt: 'static {
	fn get_index(&self) -> i64;
}

impl<O: IsA<GcValueIndexedNode>> GcValueIndexedNodeExt for O {
	fn get_index(&self) -> i64 {
		unsafe { aravis_sys::arv_gc_value_indexed_node_get_index(self.as_ref().to_glib_none().0) }
	}
}

impl fmt::Display for GcValueIndexedNode {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		write!(f, "GcValueIndexedNode")
	}
}
