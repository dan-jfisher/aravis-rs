// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::DomElement;
use crate::DomNode;
use crate::GcNode;
use crate::GcPropertyNode;
use glib::object::Cast;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
	#[doc(alias = "ArvGcValueIndexedNode")]
	pub struct GcValueIndexedNode(Object<ffi::ArvGcValueIndexedNode, ffi::ArvGcValueIndexedNodeClass>) @extends GcPropertyNode, GcNode, DomElement, DomNode;

	match fn {
		type_ => || ffi::arv_gc_value_indexed_node_get_type(),
	}
}

impl GcValueIndexedNode {
	#[doc(alias = "arv_gc_value_indexed_node_new")]
	pub fn new() -> GcValueIndexedNode {
		assert_initialized_main_thread!();
		unsafe { GcNode::from_glib_full(ffi::arv_gc_value_indexed_node_new()).unsafe_cast() }
	}

	#[doc(alias = "arv_gc_value_indexed_node_get_index")]
	#[doc(alias = "get_index")]
	pub fn index(&self) -> i64 {
		unsafe { ffi::arv_gc_value_indexed_node_get_index(self.to_glib_none().0) }
	}
}

impl Default for GcValueIndexedNode {
	fn default() -> Self {
		Self::new()
	}
}

unsafe impl Send for GcValueIndexedNode {}

impl fmt::Display for GcValueIndexedNode {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		f.write_str("GcValueIndexedNode")
	}
}
